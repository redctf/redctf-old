version: '3'

services:
  rethinkdb:
    image: rethinkdb:2.3.6
    container_name: rethinkdb
    networks: 
      - "traefik"
    ports:
      - "28015:28015"
      - "8088:8080"
    volumes:
      - ./server/rethinkdb:/data
    networks:
      - traefik

  horizon:
    image: rethinkdb/horizon
    container_name: horizon
    command: su -s /bin/sh horizon -c "hz serve --dev --connect rethinkdb://rethinkdb:28015 --bind all /usr/app"
    networks: 
      - "traefik"
    volumes:
      - ./client:/usr/app
    ports:
      - "8181:8181"
    depends_on:
      - rethinkdb
    networks:
      - traefik

  django:
    build: ./server/
    container_name: django
    command: bash -c "python3 manage.py migrate && python3 manage.py runserver 0.0.0.0:8000"
    volumes:
      # So that Django can interact with Docker host
      - /var/run/docker.sock:/var/run/docker.sock
      - ./server:/code
    ports:
      - "8000:8000"
    environment:
      - RDB_HOST=rethinkdb
      - RDB_PORT=28015
    depends_on:
      - horizon
    networks:
      - traefik

    labels:
      - traefik.http.routers.errorhandler.service=errorhandler-backend
      - traefik.http.services.errorhandler-backend.loadbalancer.server.port=8000

  react:
    build:
      context: ./client/
      args:
        #SET THIS ARGUMENT TO REFLECT THE EXPOSED IP/HOSTNAME (1.1.1.1, example.com, localhost)

        - hosted_at=localhost
    container_name: react
    command: bash -c "cd /code && yarn install && yarn start"
    volumes:
      - ./client:/code
    ports:
      - "3000:3000"
    depends_on:
      - django
    networks:
      - traefik
    labels:
      - traefik.http.services.react-backend.loadbalancer.server.port=3000
      - traefik.http.routers.react.service=react-backend
      - traefik.http.routers.react.rule= PathPrefix(`/scoreboard`) || PathPrefix(`/challenges`) || PathPrefix(`/admin`) || PathPrefix(`/team`) || PathPrefix(`/register`) || PathPrefix(`/posts`) || PathPrefix(`/instructions`) ||PathPrefix(`/login`)
      - traefik.http.routers.react.middlewares=errorhandler@docker
      # this seperate rule for the default route is necessary for dashboard to work - this is due to the fact that traefik evaluates longest rule first. 
      - traefik.http.routers.default2.rule=PathPrefix(`/`)
      - traefik.http.routers.default2.middlewares=errorhandler@docker


  reverse-proxy:
      # The official v2.0 Traefik docker image
      image: traefik:v2.0.6
      container_name: reverse-proxy
      # Enables the web UI and tells Traefik to listen to docker
      command: --providers.docker --accesslog=true  --api.insecure=true --api.dashboard=true
      ports:
        # The HTTP port
        - "80:80"
        # The Web UI (enabled by --api.insecure=true)
        - "8080:8080"
      volumes:
        # So that Traefik can listen to the Docker events
        - /var/run/docker.sock:/var/run/docker.sock
      labels:
        # error handling definition:
        - traefik.http.middlewares.errorhandler.errors.status=404
        - traefik.http.middlewares.errorhandler.errors.service=errorhandler-backend
        - traefik.http.middlewares.errorhandler.errors.query=/graphql/
        - traefik.http.routers.api.rule=PathPrefix(`/api`) || PathPrefix(`/dashboard`)
        - "traefik.http.routers.api.service=api@internal"
        - traefik.http.routers.api.middlewares=errorhandler@docker
       
      depends_on:
        - django
      networks:
        - traefik

networks:
  traefik:
        

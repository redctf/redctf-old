version: '3'

services:
  django:
    build:
      context: ./server/
      dockerfile: dockerfile-prod
    container_name: django
    restart: unless-stopped
    command: bash -c "gunicorn redctf.wsgi:application -w 3 --log-file=- --bind 0.0.0.0:8000"
    volumes:
      # So that Django can interact with Docker host
      - /var/run/docker.sock:/var/run/docker.sock
      # for serving django admin css, etc.
      - static_volume_prod:/home/app/redctf/static
      - media_volume_prod:/home/app/redctf/media
    depends_on:
      - postgres
    networks:
      - traefik
    env_file:
      - ./server/.env.prod

  postgres:
    image: postgres:12.2
    container_name: postgres
    restart: unless-stopped
    volumes:
      - postgres_data_prod:/var/lib/postgresql/data/
    networks:
      - traefik
    env_file:
      - ./server/.env.prod.db

  traefik:
      # The official v2.0 Traefik docker image
      image: traefik:v2.0.6
      container_name: reverse-proxy
      restart: unless-stopped
      command:
        - "--accesslog=true"
        - "--providers.docker=true"
        - "--providers.docker.exposedbydefault=false"
        - "--entrypoints.web.address=:80"
        # Enable for debug logging
        #- "--log.level=DEBUG"
        # Enable for the web UI
        #- "--api.insecure=true"
        #- "--api.dashboard=true"
      ports:
        # The HTTP(s) ports
        - "8080:80"
      volumes:
        # So that Traefik can listen to the Docker events
        - /var/run/docker.sock:/var/run/docker.sock
      #labels:
        # Enable for the web UI
        #- traefik.enable=true
        #- traefik.http.routers.api.rule=PathPrefix(`/api`) || PathPrefix(`/dashboard`)
        #- traefik.http.routers.api.service=api@internal
      depends_on:
        - nginx
      networks:
        - traefik

  nginx:
    build:
      context: .
      dockerfile: ./server/nginx/dockerfile-nginx
    container_name: nginx
    restart: unless-stopped  
    volumes:
      # for serving client (react) files
      - static_volume_prod:/home/app/redctf/static
      - media_volume_prod:/home/app/redctf/media
    labels:
      - traefik.enable=true
      - traefik.http.routers.nginx.rule=PathPrefix(`/`)
      - traefik.http.routers.nginx.service=nginx-backend
      - traefik.http.services.nginx-backend.loadbalancer.server.port=8080
    depends_on:
      - django
    networks:
      - traefik

  letsencrypt:
    image: linuxserver/letsencrypt:1.3.0-ls104
    container_name: letsencrypt
    restart: unless-stopped
    cap_add:
      - NET_ADMIN
    ports:
      - 80:80
      - 443:443
    volumes:
      - ./letsencrypt/config:/config
    environment:
      - EMAIL=<email to be registered with letsencrypt>
      - PUID=1000
      - PGID=1000
      - TZ=Central
      - URL=<highest level registered domain that you have control of ie. google.com or ctf.thissite.com>
      - SUBDOMAINS=<enter subdomain here> #can be "wildcard" if using dns validation
      - STAGING=true
      #THIS CONFIGURATION IS FOR DNS VALIDATION
      #(requires api access to dns provider)
      #(requires credentials in /config/dns-conf/cloudflare.ini)
      - VALIDATION=dns
      - DNSPLUGIN=cloudflare
      #THIS CONFIGURATION IS FOR HTTP VALIDATION (requires port 80)
      #- VALIDATION=http
    depends_on:
      - traefik
    networks:
      - traefik

networks:
  traefik:

volumes:
  postgres_data_prod:
  static_volume_prod:
  media_volume_prod: